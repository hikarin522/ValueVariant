<#@ template language="C#" hostspecific="false" linePragmas="false" #>
<#@ output extension=".tt.cs" encoding="utf-8" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ include file="../../Const.t4" #>
// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY ValueVariantT.ActionVisitor.tt. DO NOT CHANGE IT.
// </auto-generated>
#nullable enable

using System;
using System.Collections.Generic;
using System.Runtime.CompilerServices;

using V2 = ValueVariant;

namespace ValueVariant.Details;
<# for (var i = 1; i <= MaxTypeParam; ++i) { #>

partial class ValueVariant<<#= Join(1, i, e => $"T{e}") #>>
{
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static bool Equals<T>(in T lhs, in T rhs) where T: unmanaged, V2.IValueVariant<T, <#= Join(1, i, e => $"T{e}") #>>
		=> lhs.TypeIndex == rhs.TypeIndex && lhs.TypeIndex switch {
<#   for (var j = 1; j <= i; ++j) { #>
			<#= j #> => EqualityComparer<T<#= j #>>.Default.Equals(lhs.Item<#= j #>, rhs.Item<#= j #>),
<#   } #>
			_ => true
		};

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static int GetHashCode<T>(in T @this) where T: unmanaged, V2.IValueVariant<T, <#= Join(1, i, e => $"T{e}") #>>
		=> @this.TypeIndex switch {
<#   for (var j = 1; j <= i; ++j) { #>
			<#= j #> => HashCode.Combine(@this.TypeIndex, @this.Item<#= j #>),
<#   } #>
			_ => HashCode.Combine(@this.TypeIndex)
		};

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static string ToString<T>(in T @this) where T: unmanaged, V2.IValueVariant<T, <#= Join(1, i, e => $"T{e}") #>>
		=> @this.TypeIndex switch {
<#   for (var j = 1; j <= i; ++j) { #>
			<#= j #> => @this.Item<#= j #>.ToString(),
<#   } #>
			_ => string.Empty
		};
}
<# } #>
